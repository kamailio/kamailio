########################################################################
# This configuration is autogenerated by sip:wizard
# (http://www.sipwise.com/wizard) on Fri Nov 09 17:06:52 +0100 2007
# for Kamailio 1.2
#
# Copyright (C) 2007 Sipwise (support@sipwise.com)
########################################################################

########################################################################
# By obtaining, using, and/or copying this configuration and/or its
# associated documentation, you agree that you have read, understood,
# and will comply with the Terms of Usage provided at
# http://www.sipwise.com/news/?page_id=6 as well as the following
# additions:
#
# Permission to use, copy, modify, and distribute this configuration and
# its associated documentation for any purpose and without fee is hereby
# granted, provided that the above copyright notice appears in all
# copies, and that both that copyright notice and this permission notice
# appear in supporting documentation, and that the name of Sipwise or
# the author will not be used in advertising or publicity pertaining to
# distribution of the configuration without specific, written prior
# permission.
########################################################################

########################################################################
# Before using this configuration, read the following prerequisites in
# order to gain the designated functionallity:
#
# base:
#    You have to insert all locally served domains (i.e. 
#    "kamailioctl domain add your.domain.com").
#    
# usr-preferences:
#    This feature relies on UUID-based provisioning. Thus, you have 
#    to add the uuid-column to the subscriber table ("alter table 
#    subscriber add column uuid varchar(64);") and populate it with a 
#    UUID (unique user identifier) per user, for example an 
#    auto-incremented id.
#    
# offnet-incoming-sip:
#    You have to populate the "trusted"-table with rules for 
#    allowed peering hosts (i.e. src_ip="1.2.3.4", proto="udp", 
#    from_pattern="^sip:.*@domain.of.peering.host$", tag="1234"). If the 
#    feature "usr-preferences" is selected, the tag-value is used as 
#    caller-uuid for such calls.
#    
# offnet-pstn:
#    You have to add a routing entry for lcr (i.e. "kamailioctl  lcr 
#    addroute '' '' 1 1"). Additionally, you have to add your gateways 
#    (i.e. "kamailioctl lcr addgw my-test-gw 1.2.3.4 5060 sip udp 1").
#    
# ring-timeout:
#    You have to provision the ring-timeout (AVP ringtimeout as 
#    type 1) for each user in the usr_preferences table (i.e. 
#    uuid='1234', username='', domain='', attribute='ringtimeout', 
#    type=1, value='60'). If no timeout is provisioned, the default 
#    timeout will be used.
#    
# cfu:
#    You have to provision the call-forward-unconditional as full 
#    SIP URI (AVP cfu as type 0) for each user in the usr_preferences 
#    table (i.e. uuid='1234', username='', domain='', attribute='cfu', 
#    type=0, value='sip:foo@otherdomain.com').  Forwards to another user 
#    in the same domain or to other domains are possible.
#    
# cfc:
#    You have to provision the call-forward-conditional as full SIP 
#    URI (AVP cfc as type 0) for each user in the usr_preferences table 
#    (i.e. uuid='1234', username='', domain='', attribute='cfc', type=0, 
#    value='sip:foo@otherdomain.com').  Forwards to another user in the 
#    same domain or to other domains are possible.
#    
# user-aliases:
#    You have to add aliases for your users (i.e. "kamailioctl alias 
#    add 01234567 sip:bob@yourdomain.com" for usrloc-based aliases or 
#    make entries into "dbaliases" table for db-based aliases)
#    
# cli:
#    You have to provision the CLI as full SIP URI (AVP cli as type 
#    0) for each user in the usr_preferences table (i.e. uuid='1234', 
#    username='', domain='', attribute='cli', type=0, 
#    value='sip:01234567@yourdomain.com').
#    
# clir:
#    You have to provision '1' to enable CLIR and '0' to disable it 
#    (AVP clir as type 1) for each user in the usr_preferences table 
#    (i.e. uuid='1234', username='', domain='', attribute='clir', 
#    type=1, value='1').
#    
# acc-db:
#    You have to add the columns "src_leg" and "dst_leg" to your 
#    acc-table ("alter table acc add column src_leg varchar(128); alter 
#    table acc add column dst_leg varchar(128);").
#    
########################################################################

########################################################################
# Configuration 'sip:wizard - Fri Nov 09 17:06:52 +0100 2007'
########################################################################

listen = udp:127.0.0.1:5060
children = 8
debug = 2
fork = yes
disable_tcp = no
log_facility = LOG_DAEMON
log_stderror = no
tcp_children = 4
mhomed = no
server_signature = yes
reply_to_via = no
sip_warning = no
check_via = no
dns = no
rev_dns = no
disable_core_dump = no
dns_try_ipv6 = yes
dns_use_search_list = yes

loadmodule "pv/pv.so"
loadmodule "corex/corex.so"
loadmodule "kex/kex.so"

loadmodule "usrloc/usrloc.so"
modparam("usrloc", "user_column", "username")
modparam("usrloc", "domain_column", "domain")
modparam("usrloc", "contact_column", "contact")
modparam("usrloc", "expires_column", "expires")
modparam("usrloc", "q_column", "q")
modparam("usrloc", "callid_column", "callid")
modparam("usrloc", "cseq_column", "cseq")
modparam("usrloc", "methods_column", "methods")
modparam("usrloc", "flags_column", "flags")
modparam("usrloc", "user_agent_column", "user_agent")
modparam("usrloc", "received_column", "received")
modparam("usrloc", "socket_column", "socket")
modparam("usrloc", "use_domain", 0)
modparam("usrloc", "desc_time_order", 0)
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("usrloc", "db_mode", 1)
modparam("usrloc", "matching_mode", 0)
modparam("usrloc", "cseq_delay", 20)
modparam("usrloc", "nat_bflag", 6)

loadmodule "maxfwd/maxfwd.so"
modparam("maxfwd", "max_limit", 256)

loadmodule "rr/rr.so"
modparam("rr", "enable_full_lr", 0)
modparam("rr", "append_fromtag", 1)
modparam("rr", "enable_double_rr", 1)
modparam("rr", "add_username", 0)

loadmodule "tm/tm.so"
modparam("tm", "fr_timer", 30)
modparam("tm", "fr_inv_timer", 120)
modparam("tm", "wt_timer", 5)
modparam("tm", "delete_timer", 2)
modparam("tm", "ruri_matching", 1)
modparam("tm", "via1_matching", 1)
modparam("tm", "unix_tx_timeout", 2)
modparam("tm", "restart_fr_on_each_reply", 1)
modparam("tm", "pass_provisional_replies", 0)
modparam("tm", "fr_inv_timer_avp", "$avp(s:callee_fr_inv_timer)")

loadmodule "xlog/xlog.so"
modparam("xlog", "buf_size", 4096)
modparam("xlog", "force_color", 0)

loadmodule "domain/domain.so"
modparam("domain", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("domain", "domain_table", "domain")
modparam("domain", "domain_col", "domain")

loadmodule "nathelper/nathelper.so"
modparam("nathelper", "natping_interval", 0)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_method", "OPTIONS")
modparam("nathelper", "received_avp", "$avp(i:801)")

loadmodule "rtpproxy/rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "unix:/run/rtpproxy.sock")
modparam("rtpproxy", "rtpproxy_disable_tout", 60)
modparam("rtpproxy", "rtpproxy_tout", 1)
modparam("rtpproxy", "rtpproxy_retr", 5)

loadmodule "textops/textops.so"

loadmodule "siputils/siputils.so"

loadmodule "registrar/registrar.so"
modparam("registrar", "default_expires", 3600)
modparam("registrar", "min_expires", 60)
modparam("registrar", "max_expires", 0)
modparam("registrar", "default_q", 0)
modparam("registrar", "append_branches", 1)
modparam("registrar", "case_sensitive", 0)
modparam("registrar", "received_param", "received")
modparam("registrar", "max_contacts", 0)
modparam("registrar", "retry_after", 0)
modparam("registrar", "method_filtering", 0)
modparam("registrar", "path_mode", 2)
modparam("registrar", "path_use_received", 0)
modparam("registrar", "received_avp", "$avp(i:801)")

loadmodule "sl/sl.so"
modparam("sl", "bind_tm", 1)

loadmodule "db_mysql/db_mysql.so"
modparam("db_mysql", "ping_interval", 300)
modparam("db_mysql", "auto_reconnect", 1)

loadmodule "auth/auth.so"
modparam("auth", "nonce_expire", 300)

loadmodule "auth_db/auth_db.so"
modparam("auth_db", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("auth_db", "user_column", "username")
modparam("auth_db", "domain_column", "domain")
modparam("auth_db", "password_column", "password")
modparam("auth_db", "password_column_2", "ha1b")
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "use_domain", 0)
modparam("auth_db", "load_credentials", "$avp(s:caller_uuid)=uuid")

loadmodule "uri_db/uri_db.so"
modparam("uri_db", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("uri_db", "db_table", "subscriber")
modparam("uri_db", "use_uri_table", 0)
modparam("uri_db", "use_domain", 0)

loadmodule "avpops/avpops.so"
modparam("avpops", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("avpops", "avp_table", "usr_preferences")
modparam("avpops", "use_domain", 0)
modparam("avpops", "uuid_column", "uuid")
modparam("avpops", "username_column", "username")
modparam("avpops", "domain_column", "domain")
modparam("avpops", "attribute_column", "attribute")
modparam("avpops", "value_column", "value")
modparam("avpops", "type_column", "type")

loadmodule "enum/enum.so"
modparam("enum", "domain_suffix", "e164.org.")

loadmodule "permissions/permissions.so"
modparam("permissions", "default_allow_file", "permissions.allow")
modparam("permissions", "default_deny_file", "permissions.deny")
modparam("permissions", "check_all_branches", 1)
modparam("permissions", "allow_suffix", ".allow")
modparam("permissions", "deny_suffix", ".deny")
modparam("permissions", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("permissions", "db_mode", 1)
modparam("permissions", "trusted_table", "trusted")
modparam("permissions", "source_col", "src_ip")
modparam("permissions", "proto_col", "proto")
modparam("permissions", "from_col", "from_pattern")
modparam("permissions", "tag_col", "tag")
modparam("permissions", "peer_tag_avp", "$avp(s:peer_uuid)")

loadmodule "lcr/lcr.so"
modparam("lcr", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("lcr", "gw_uri_avp", "$avp(709)")
modparam("lcr", "ruri_user_avp", "$avp(500)")
modparam("lcr", "tag_avp", "$avp(lcr_tag)")

loadmodule "uac_redirect/uac_redirect.so"
modparam("uac_redirect", "default_filter", "accept")
modparam("uac_redirect", "acc_function", "acc_log_request")
modparam("uac_redirect", "acc_db_table", "acc")

loadmodule "alias_db/alias_db.so"
modparam("alias_db", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("alias_db", "user_column", "username")
modparam("alias_db", "domain_column", "domain")
modparam("alias_db", "alias_user_column", "alias_username")
modparam("alias_db", "alias_domain_column", "alias_domain")
modparam("alias_db", "use_domain", 0)

loadmodule "uac/uac.so"
modparam("uac", "rr_from_store_param", "vsf")
modparam("uac", "rr_to_store_param", "vsf")
modparam("uac", "restore_mode", "auto")
modparam("uac", "restore_passwd", "s1p:Wiz4rd!")

loadmodule "acc/acc.so"
modparam("acc", "early_media", 0)
modparam("acc", "failed_transaction_flag", 24)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "log_flag", 0)
modparam("acc", "log_missed_flag", 0)
modparam("acc", "log_level", 2)
modparam("acc", "db_flag", 25)
modparam("acc", "db_missed_flag", 0)
modparam("acc", "db_table_acc", "acc")
modparam("acc", "db_table_missed_calls", "missed_calls")
modparam("acc", "db_url", "mysql://kamailio:kamailiorw@localhost/kamailio")
modparam("acc", "acc_method_column", "method")
modparam("acc", "acc_callid_column", "callid")
modparam("acc", "acc_time_column", "time")
modparam("acc", "acc_from_tag_column", "from_tag")
modparam("acc", "detect_direction", 1)
modparam("acc", "acc_sip_code_column", "sip_code")
modparam("acc", "acc_sip_reason_column", "sip_reason")
modparam("acc", "multi_leg_info", "src_leg=$avp(i:901);dst_leg=$avp(i:902)")

########################################################################
# Request route 'main'
########################################################################
request_route {
	xlog("L_INFO", "New request - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	force_rport();
	if (!mf_process_maxfwd_header("10"))
	{
		
		xlog("L_INFO", "Too many hops - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		sl_send_reply("483", "Too Many Hops");
		exit;
	}
	if(!is_method("REGISTER"))
	{
		if(nat_uac_test("19"))
		{
			record_route(";nat=yes");
		}
		else
		{
			record_route();
		}
	}
	if(is_method("CANCEL") || is_method("BYE"))
	{
		rtpproxy_destroy();
	}
	if(loose_route())
	{
		if(!has_totag())
		{
			
			xlog("L_INFO", "Initial loose-routing rejected - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
			sl_send_reply("403", "Initial Loose-Routing Rejected");
			exit;
		}
		if(nat_uac_test("19") || search("^Route:.*;nat=yes"))
		{
			fix_nated_contact();
			setbflag(6);
		}
		if(is_method("BYE"))
		{
			setflag(24); # account failed transactions
			setflag(25); # account successful transactions
		}
		# mark as loose-routed for acc
		setflag(26);
		
		route(12);
	}
	if(is_method("REGISTER"))
	{
		route(11);
	}
	setflag(24); # account failed transactions
	setflag(25); # account successful transactions
	if(is_method("INVITE"))
	{
		route(13);
	}
	if(is_method("CANCEL") || is_method("ACK"))
	{
		route(19);
	}
	
	route(20);
}

########################################################################
# Request route 'clear-usr-preferences-caller'
########################################################################
route[1]
{
	xlog("L_INFO", "Clear caller preferences - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	avp_delete("$avp(s:caller_cli)/g");
	avp_delete("$avp(s:clir)/g");
	
}

########################################################################
# Request route 'clear-usr-preferences-callee'
########################################################################
route[2]
{
	xlog("L_INFO", "Clear callee preferences - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	avp_delete("$avp(s:callee_fr_inv_timer)/g");
	avp_delete("$avp(s:cfu)/g");
	avp_delete("$avp(s:cfc)/g");
	
}

########################################################################
# Request route 'usr-preferences-caller'
########################################################################
route[3]
{
	route(1);
	xlog("L_INFO", "Load caller preferences for uuid '$avp(s:caller_uuid)' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	# load caller avps
	avp_db_load("$avp(s:caller_uuid)", "*");
	avp_copy("$avp(s:cli)", "$avp(s:caller_cli)/d");
	if(is_avp_set("$avp(s:clir)/n") && avp_check("$avp(s:clir)", "eq/i:1"))
	{
		# mark for anonymization
		setflag(28);
	}
	
}

########################################################################
# Request route 'usr-preferences-callee'
########################################################################
route[4]
{
	xlog("L_INFO", "Load callee preferences for uuid '$avp(s:callee_uuid)' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	# load callee avps
	avp_db_load("$avp(s:callee_uuid)", "*");
	if(is_avp_set("$avp(s:cfu)/s"))
	{
		
		xlog("L_INFO", "Call-forward-unconditional to '$avp(s:cfu)' found - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(8);
		avp_delete("$avp(s:caller_uuid)/g");
		avp_copy("$avp(s:callee_uuid)", "$avp(s:caller_uuid)/d");
		avp_pushto("$ru", "$avp(s:cfu)");
		
		route(3);
		route(14);
		exit;
	}
	if(is_avp_set("$avp(s:ringtimeout)/n"))
	{
		
		xlog("L_INFO", "Setting ring timeout to $avp(s:ringtimeout) secs - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		avp_copy("$avp(s:ringtimeout)", "$avp(s:callee_fr_inv_timer)/d");
	}
	
}

########################################################################
# Request route 'acc-caller'
########################################################################
route[5]
{
	xlog("L_INFO", "Setting acc source-leg for uuid '$avp(s:caller_uuid)' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	avp_printf("$avp(i:901)", "$avp(s:caller_uuid)|$avp(s:acc_caller_user)|$avp(s:acc_caller_domain)|$avp(s:acc_state)");
	
}

########################################################################
# Request route 'acc-callee'
########################################################################
route[6]
{
	xlog("L_INFO", "Setting acc destination-leg for uuid '$avp(s:callee_uuid)' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	avp_printf("$avp(i:902)", "$avp(s:callee_uuid)|$avp(s:acc_callee_user)|$avp(s:acc_callee_domain)");
	
}

########################################################################
# Request route 'acc-failure'
########################################################################
route[7]
{
	xlog("L_INFO", "Accounting failed request for uuid '$avp(s:caller_uuid)' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	route(5);
	route(6);
	resetflag(24);
	acc_db_request("404", "acc");
	
}

########################################################################
# Request route 'cfu-acc'
########################################################################
route[8]
{
	$avp(s:acc_callee_user) = $rU;
	$avp(s:acc_callee_domain) = $rd;
	
	route(5);
	route(6);
	avp_delete("$avp(s:acc_caller_user)");
	avp_delete("$avp(s:acc_caller_domain)");
	avp_copy("$avp(s:acc_callee_user)", "$avp(s:acc_caller_user)");
	avp_copy("$avp(s:acc_callee_domain)", "$avp(s:acc_caller_domain)");
	avp_delete("$avp(s:acc_state)/g");
	$avp(s:acc_state) = "cfu";
	
}

########################################################################
# Request route 'clir'
########################################################################
route[9]
{
	if(isflagset(28) && !isflagset(27))
	{
		setflag(27);
		
		xlog("L_INFO", "Anonymize caller - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		uac_replace_from("Anonymous","sip:anonymous@anonymous.invalid");
		if(is_present_hf("Privacy"))
		{
			remove_hf("Privacy");
		}
		append_hf("Privacy: id\r\n");
	}
	
}

########################################################################
# Request route 'stop-media-proxy'
########################################################################
route[10]
{
	if(isflagset(22))
	{
		rtpproxy_destroy();
	}
	
}

########################################################################
# Request route 'base-route-register'
########################################################################
route[11]
{
	sl_send_reply("100", "Trying");
	if(!www_authorize("$td", "subscriber")) 
	{
		
		xlog("L_INFO", "Register authentication failed - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		www_challenge("$td", "0");
		exit;
	}
	if(!check_to()) 
	{
		
		xlog("L_INFO", "Spoofed To-URI detected - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		sl_send_reply("403", "Spoofed To-URI Detected");
		exit;
	}
	consume_credentials();
	if(!search("^Contact:[ ]*\*") && nat_uac_test("19")) 
	{
		fix_nated_register();
		setbflag(6);
	}
	if(!save("location")) 
	{
		
		xlog("L_ERR", "Saving contact failed - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		sl_reply_error();
		exit;
	}
	
	xlog("L_INFO", "Registration successful - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	exit;
	
}

########################################################################
# Request route 'base-outbound'
########################################################################
route[12]
{
	if(is_present_hf("P-Asserted-Identity"))
	{
		remove_hf("P-Asserted-Identity");
	}
	if(is_present_hf("Remote-Party-ID"))
	{
		remove_hf("Remote-Party-ID");
	}
	if(is_avp_set("$avp(s:caller_cli)/s"))
	{
		if(!isflagset(28))
		{
			
			xlog("L_INFO", "Set caller CLI '$avp(s:caller_cli)' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
			append_hf("P-Asserted-Identity: <$avp(s:caller_cli)>\r\n");
		}
	}
	
	route(9);
	if(isbflagset(6))
	{
		if(!isflagset(22) && !search("^Content-Length:[ ]*0"))
		{
			setflag(22);
			rtpproxy_manage();
		}
		
		t_on_reply("2");
	}
	else
	{
		
		t_on_reply("1");
	}
	if(!isflagset(21))
	{
		
		t_on_failure("2");
		if(!isflagset(26))
		{
			$avp(s:acc_callee_user) = $rU;
			$avp(s:acc_callee_domain) = $rd;
			
			route(5);
			route(6);
		}
	}
	if(isflagset(29))
	{
		append_branch();
	}
	if(is_present_hf("Proxy-Authorization"))
	{
		consume_credentials();
	}
	
	xlog("L_INFO", "Request leaving server, D-URI='$du' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	# no 100 (we already sent it) and no DNS blacklisting
	if(!t_relay_to("0x05"))
	{
		sl_reply_error();
		if(is_method("INVITE") && isbflagset(6))
		{
			rtpproxy_destroy();
		}
	}
	exit;
	
}

########################################################################
# Request route 'base-route-invite'
########################################################################
route[13]
{
	sl_send_reply("100", "Trying");
	if(from_gw(1))
	{
		$avp(s:caller_uuid) = "0";
		
		xlog("L_INFO", "Call from PSTN' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		setflag(23);
	}
	else
	{
		if(allow_trusted())
		{
			if(is_avp_set("$avp(s:peer_uuid)/s"))
			{
				# use tag-column from trusted-table as uuid for this caller
				avp_copy("$avp(s:peer_uuid)", "$avp(s:caller_uuid)/d");
			}
			else
			{
				# if no uuid is set, use "0" as default uuid
				$avp(s:caller_uuid) = "0";
			}
			
			xlog("L_INFO", "Call from trusted peer with uuid '$avp(s:caller_uuid)' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
			if(!is_domain_local("$rd"))
			{
				
				xlog("L_INFO", "Rejecting peering attempt with non-local request domain - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
				sl_send_reply("403", "Relaying Denied");
				exit;
			}
			setflag(23);
		}
		else
		{
			if(!proxy_authorize("$fd", "subscriber")) 
			{
				
				xlog("L_INFO", "Proxy authentication failed - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
				proxy_challenge("$fd", "0");
				exit;
			}
			if(!check_from()) 
			{
				
				xlog("L_INFO", "Spoofed From-URI detected - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
				sl_send_reply("403", "Spoofed From-URI Detected");
				exit;
			}
		}
	}
	$avp(s:acc_caller_user) = $fU;
	$avp(s:acc_caller_domain) = $fd;
	$avp(s:acc_state) = "call";
	
	route(3);
	if(nat_uac_test("19")) 
	{
		fix_nated_contact();
		setbflag(6);
	}
	
	route(14);
}

########################################################################
# Request route 'invite-find-callee'
########################################################################
route[14]
{
	if(alias_db_lookup("dbaliases"))
	{
		
		xlog("L_INFO", "Callee was aliased - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	}
	
	route(2);
	if(!is_domain_local("$rd"))
	{
		setflag(20);
		$avp(s:callee_uuid) = "0";
		
		route(16);
	}
	avp_delete("$avp(s:callee_uuid)");
	avp_db_query("select uuid from subscriber where username = '$rU'", "$avp(s:callee_uuid)");
	if(is_avp_set("$avp(s:callee_uuid)/s"))
	{
		
		xlog("L_INFO", "Callee is local, uuid='$avp(s:callee_uuid)' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(15);
	}
	else
	{
		$avp(s:callee_uuid) = "0";
		
		xlog("L_INFO", "Callee is not local - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(16);
	}
	exit;
	
}

########################################################################
# Request route 'invite-to-internal'
########################################################################
route[15]
{
	route(4);
	if(!lookup("location")) 
	{
		
		xlog("L_INFO", "Local user offline - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		$avp(s:acc_callee_user) = $rU;
		$avp(s:acc_callee_domain) = $rd;
		
		route(7);
		sl_send_reply("404", "User Offline");
	}
	else
	{
		
		xlog("L_INFO", "Local user online - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(12);
	}
	exit;
	
}

########################################################################
# Request route 'invite-to-external'
########################################################################
route[16]
{
	if(isflagset(20))
	{
		
		xlog("L_INFO", "Call to foreign domain - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(12);
		exit;
	}
	
	route(18);
	if(!isflagset(23))
	{
		# don't allow calls relaying from PSTN to PSTN, if not explicitely forwarded
		if(uri =~ "^sip:[0-9]+@")
		{
			# only route numeric users to PSTN
			if(!load_gws(1))
			{
				
				xlog("L_ERR", "Error loading PSTN gateways - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
				sl_send_reply("503", "PSTN Termination Currently Unavailable");
				exit;
			}
			if(!next_gw())
			{
				
				xlog("L_ERR", "No PSTN gateways available - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
				sl_send_reply("503", "PSTN Termination Currently Unavailable");
				exit;
			}
			setflag(21);
			
			t_on_failure("1");
			route(12);
		}
	}
	
	xlog("L_INFO", "Call to unknown user - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	route(7);
	sl_send_reply("404", "User Not Found");
	exit;
	
}

########################################################################
# Request route 'normalize-e164'
########################################################################
route[17]
{
	# European numbering plans look like this:
	#   CC  = country code (i.e. 43 for Austria)
	#   NDC = national destination code (i.e. 1 for Vienna)
	#   SN  = subscriber number (i.e. 4001234)
	#  
	#       CC + NDC + SN, i.e. 4314001234
	#
	# Within the same CC+NDC, it can be omitted, so if
	# +4314001234 wants to call +4315002345, one can dial
	# just 5002345.
	#
	# Within the same CC, CC can be ommitted and a "0" is prefixed
	# to NDC, so if +4314001234 wants to call +4326003456, 
	# one can dial 026003456.
	#
	# For international calls, either "00" or + is prefixed, like
	# +49123456780 or 0049123456789.
	#
	avp_delete("$avp(s:orig_callee_user)/g");
	$avp(s:orig_callee_user) = $rU;
	if(uri =~ "^sip:(\+[1-9])?[0-9]+@")
	{
		# looks like a PSTN number
		if(uri =~ "^sip:0[1-9][0-9]+@")
		{
			# we have format 0+NDC+SN
			strip(1);
			prefix("+49");
		}
		else if(uri =~ "^sip:00[1-9]+@")
		{
			# we have format 00 + CC + NDC + SN
			strip(2);
			prefix("+");
		}
		else if(!uri =~ "^sip:\+[1-9][0-9]+@")
		{
			# unknown format, maybe NDC wasn't added before?
			
			xlog("L_INFO", "Not normalized callee '$avp(s:orig_callee_user)' to E.164 format - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
			return(-1);
		}
		# else we have "+" + CC + NDC + SN
		
		xlog("L_INFO", "Normalized callee '$avp(s:orig_callee_user)' to E.164 format '$rU' - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		return(1);
	}
	else
	{
		
		xlog("L_INFO", "Not normalized callee '$avp(s:orig_callee_user)' to E.164 format - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		return(-1);
	}
	
}

########################################################################
# Request route 'lookup-enum'
########################################################################
route[18]
{
	route(17);
	if($rc == 1)
	{
		if(enum_query("e164.org."))
		{
			# TODO: do GW fallback (load gws, set failure-route)?
			
			xlog("L_INFO", "ENUM query succeeded - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
			setdsturi("sip:bogus.localhost:5060");
			
			route(12);
			exit;
		}
		else
		{
			
			xlog("L_INFO", "ENUM query failed - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
			# ENUM query failed, revert $rU
			avp_pushto("$ru/username", "$avp(s:orig_callee_user)");
		}
	}
	
}

########################################################################
# Request route 'base-route-local'
########################################################################
route[19]
{
	t_on_reply("1");
	if(t_check_trans())
	{
		
		xlog("L_INFO", "Request leaving server - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		if(!t_relay())
		{
			sl_reply_error();
		}
	}
	else
	{
		
		xlog("L_INFO", "Dropping mis-routed request - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	}
	exit;
	
}

########################################################################
# Request route 'base-route-generic'
########################################################################
route[20]
{
	xlog("L_INFO", "Method not supported - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	sl_send_reply("501", "Method Not Supported Here");
	exit;
	
}

########################################################################
# Request route 'base-filter-failover'
########################################################################
route[21]
{
	if(!t_check_status("408|500|503"))
	{
		
		xlog("L_INFO", "No failover routing needed for this response code - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(10);
		exit;
	}
	
}

########################################################################
# Reply route 'base-standard-reply'
########################################################################
onreply_route[1]
{
	xlog("L_INFO", "Reply - S=$rs D=$rr F=$fu T=$tu IP=$si ID=$ci\n");
	exit;
	
}

########################################################################
# Reply route 'base-nat-reply'
########################################################################
onreply_route[2]
{
	xlog("L_INFO", "NAT-Reply - S=$rs D=$rr F=$fu T=$tu IP=$si ID=$ci\n");
	if(nat_uac_test("1"))
	{
		fix_nated_contact();
	}
	if(isbflagset(6) && status=~"(180)|(183)|2[0-9][0-9]") 
	{
		if(!search("^Content-Length:[ ]*0"))
		{
			rtpproxy_manage();
		}
	}
	exit;
	
}

########################################################################
# Failure route 'pstn-failover'
########################################################################
failure_route[1]
{
	xlog("L_INFO", "Failure route for PSTN entered - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
	route(21);
	if(!next_gw())
	{
		
		xlog("L_ERR", "Failed to select next PSTN gateway - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(10);
		exit;
	}
	
	t_on_failure("1");
	route(12);
}

########################################################################
# Failure route 'base-standard-failure'
########################################################################
failure_route[2]
{
	if(t_check_status("422|481|487"))
	{
		
		xlog("L_INFO", "Final reply - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(10);
		exit;
	}
	if(t_check_status("301|302"))
	{
		avp_delete("$avp(s:acc_caller_user)/g");
		avp_delete("$avp(s:acc_caller_domain)/g");
		avp_delete("$avp(s:acc_state)/g");
		avp_copy("$avp(s:acc_callee_user)", "$avp(s:acc_caller_user)");
		avp_copy("$avp(s:acc_callee_domain)", "$avp(s:acc_caller_domain)");
		$avp(s:acc_state) = "cfc";
		setflag(29);
		if(!get_redirects("1:1"))
		{
			
			xlog("L_ERROR", "Failed to fetch contact '$ct' from 301/302 - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
			acc_db_request("480", "acc");
			
			route(10);
			t_reply("480", "Temporarily Unavailable");
			exit;
		}
		# get last URI from destination-set and set it as R-URI
		avp_delete("$avp(s:tmp)/g");
		$avp(s:tmp) = $ds;	
		avp_subst("$avp(s:tmp)", "/.*(sip:.+@[^:;>]+).*$/\1/");
		avp_pushto("$ru", "$avp(s:tmp)");
		setflag(29);
		append_branch();
		
		t_on_branch("1");
		xlog("L_INFO", "Redirect from UAC intercepted - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(14);
		exit;
	}
	if($avp(s:cfc) != $null)
	{
		avp_delete("$avp(s:acc_caller_user)/g");
		avp_delete("$avp(s:acc_caller_domain)/g");
		avp_delete("$avp(s:acc_state)/g");
		avp_copy("$avp(s:acc_callee_user)", "$avp(s:acc_caller_user)");
		avp_copy("$avp(s:acc_callee_domain)", "$avp(s:acc_caller_domain)");
		$avp(s:acc_state) = "cfc";
		avp_pushto("$ru", "$avp(s:cfc)");
		setflag(29);
		append_branch();
		
		t_on_branch("1");
		xlog("L_INFO", "CFC detected - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		route(14);
	}
	
	route(21);
	route(10);
}

########################################################################
# Branch route 'cfc-drop-local'
########################################################################
branch_route[1]
{
	if(is_domain_local("$rd"))
	{
		
		xlog("L_INFO", "Dropping local branch - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");
		drop();
	}
	
}

