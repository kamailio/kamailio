<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../../doc/docbook/entities.xml">
%docentities;

]>
<!-- Module User's Guide -->

<chapter>

	<title>&adminguide;</title>

	<section>
	<title>Overview</title>
	<para>
		This module offers topology hiding by stripping the SIP routing
		headers that show topology details.
		The script interpreter gets the SIP messages with full content,
		so all existing functionality is preserved.
	</para>
	<para>
		The module is transparent for the configuration writer. It only needs to be
		loaded (tune the parameters if needed).
	</para>
	<para>
		It also works for SIP MESSAGE or other requests that do not create
		a call dialog -- record_route() must be used for them as well, the
		headers are not going to be in the messages sent to the network, they
		are needed to know local addresses used to communicate with each side.
	</para>
	</section>
	<section>
	<title>Dependencies</title>
	<section>
		<title>&kamailio; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>rr module</emphasis> - server must perform record
				routing to ensure in-dialog requests are encoded/decoded (it
				must be done for all initial requests).
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>database module</emphasis> - to store the data
				for topology stripping and restoring.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before running
		&kamailio; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>none</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>
	<section>
	<title>Parameters</title>
	<section id="topos.p.storage">
		<title><varname>storage</varname> (str)</title>
		<para>
		Type of storage, valid types are:
		</para>
		<itemizedlist>
		<listitem>
		<para>
			<emphasis>db</emphasis> - Database Backend
		</para>
		</listitem>
		<listitem>
		<para>
			<emphasis>redis</emphasis> - Redis Backend
		</para>
		</listitem>
		</itemizedlist>
		<para>
		<emphasis>
			Default value is <quote>db</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>storage</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("topos", "storage", "redis")
...
</programlisting>
		</example>
	</section>
	<section id="topos.p.db_url">
		<title><varname>db_url</varname> (str)</title>
		<para>
		Database URL.
		</para>
		<para>
		<emphasis>
			Default value is <quote>&defaultdb;</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("topos", "db_url", "&exampledb;")
...
</programlisting>
		</example>
	</section>
	<section id="topos.p.mask_callid">
		<title><varname>mask_callid</varname> (int)</title>
		<para>
			Note: this functionality is not implemented yet - the
			parameter is present in order to be in pair with topoh
			module.
		</para>
		<para>
			Whether to replace or not the Call-ID with another
			unique id generated by &kamailio;.
		</para>
		<para>
		<emphasis>
			Default value is 0 (do not mask).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>mask_callid</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("topos", "mask_callid", 1)
...
</programlisting>
		</example>
	</section>
	<section id="topos.p.sanity_checks">
		<title><varname>sanity_checks</varname> (int)</title>
		<para>
			If set to 1, topoh module will bind to sanity module in order
			to perform sanity checks over received SIP request. Default
			sanity checks are done. It is useful to check if received request
			is well formated before proceeding to encoding/decoding.
		</para>
		<para>
		<emphasis>
			Default value is 0 (do not bind to sanity module).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>sanity_checks</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("topoh", "sanity_checks", 1)
...
</programlisting>
		</example>
	</section>
	<section id="topos.p.branch_expire">
		<title><varname>branch_expire</varname> (int)</title>
		<para>
			Interval in seconds after which the branch records are deleted.
		</para>
		<para>
		<emphasis>
			Default value is 180 (3 min).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>branch_expire</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("topos", "branch_expire", 300)
...
</programlisting>
		</example>
	</section>
	<section id="topos.p.dialog_expire">
		<title><varname>dialog_expire</varname> (int)</title>
		<para>
			Interval in seconds after which the dialog records are deleted.
		</para>
		<para>
		<emphasis>
			Default value is 10800 (3 hours).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>dialog_expire</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("topos", "dialog_expire", 3600)
...
</programlisting>
		</example>
	</section>
	<section id="topos.p.clean_interval">
		<title><varname>clean_interval</varname> (int)</title>
		<para>
			Interval in seconds to run the clean up of stored
			records.
		</para>
		<para>
		<emphasis>
			Default value is 60 (1 min).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>clean_interval</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("topos", "clean_interval", 30)
...
</programlisting>
		</example>
	</section>
	<section id="topos.p.event_callback">
		<title><varname>event_callback</varname> (str)</title>
		<para>
			The name of the function in the KEMI configuration file (embedded
			scripting language such as Lua, Python, ...) to be executed instead
			of event_route[...] blocks.
		</para>
		<para>
			The function receives a string parameter with the name of the event.
		</para>
		<para>
		<emphasis>
			Default value is 'empty' (no function is executed for events).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>event_callback</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("topos", "event_callback", "ksr_topos_event")
...
-- event callback function implemented in Lua
function ksr_topos_event(evname)
	KSR.info("===== topos module triggered event: " .. evname .. "\n");
	return 1;
end
...
</programlisting>
		</example>
	</section>
	</section>
	<section>
	<title>Event Routes</title>
	<section>
		<title>event_route[topos:msg-outgoing]</title>
		<para>
		It is executed before doing topology stripping processing for an outgoing
		SIP message. If 'drop' is executed inside the event route, then the
		module skips doing the topology hiding.
		</para>
		<para>
		Inside the event route the variables $sndto(ip), $sndto(port) and
		$sndto(proto) point to the destination. The SIP message is not the one
		to be sent out, but an internally generated one at startup, to avoid
		reparsing the outgoing SIP message for the cases when topology hiding
		is not wanted.
		</para>
		<example>
		<title>Usage of event_route[topos:msg-outgoing]</title>
		<programlisting format="linespecific">
...
event_route[topos:msg-outgoing] {
  if($sndto(ip)=="10.1.1.10") {
    drop;
  }
}
...
</programlisting>
		</example>
	</section>
	</section>
</chapter>

