app_python3 Module

Maxim Sobolev

Anthony Alba

Edited by

Maxim Sobolev

   Copyright © 2010 Maxim Sobolev
     __________________________________________________________________

   Table of Contents

   1. Admin Guide

        1. Overview
        2. Dependencies

              2.1. Kamailio Modules
              2.2. External Libraries or Applications

        3. Parameters

              3.1. load (string)
              3.2. script_name (string)
              3.3. mod_init_function (string)
              3.4. child_init_method (string)

        4. Functions

              4.1. python_exec(method [, args])

        5. RPC Commands

              5.1. app_python.reload
              5.2. app_python.api_list

   List of Examples

   1.1. Set load parameter
   1.2. Set mod_init_function parameter
   1.3. Set child_init_method parameter
   1.4. python_exec usage

Chapter 1. Admin Guide

   Table of Contents

   1. Overview
   2. Dependencies

        2.1. Kamailio Modules
        2.2. External Libraries or Applications

   3. Parameters

        3.1. load (string)
        3.2. script_name (string)
        3.3. mod_init_function (string)
        3.4. child_init_method (string)

   4. Functions

        4.1. python_exec(method [, args])

   5. RPC Commands

        5.1. app_python.reload
        5.2. app_python.api_list

1. Overview

   This module is a port of the 'app_python' module to Python 3. It is
   based on the work of Maxim Sobolev.

   This module cannot be loaded together with 'app_python' as global
   symbols have not been renamed. To ease transition, the functions, KEMI
   exports, and RPC commands have the same names as 'app_python', which
   also means the two modules cannot coexist.

   This module allows executing Python scripts from the config file,
   exporting functions to access the SIP message from Python.

   For some basic examples of Python scripts that can be used with this
   module, look at the files inside the source tree located at
   'modules/app_python3/python_examples/'.

2. Dependencies

   2.1. Kamailio Modules
   2.2. External Libraries or Applications

2.1. Kamailio Modules

   The following modules must be loaded before this module:
     * none.

2.2. External Libraries or Applications

   The following libraries or applications must be installed before
   running Kamailio with this module loaded:
     * python3 - Python 3 runtime.

   To compile this module the Python 3 development package is needed.
   Requirements:
     * python3-dev - Python 3 development package.
     * python3-config - (part of python3-dev) tool to output C includes
       and library paths.

3. Parameters

   3.1. load (string)
   3.2. script_name (string)
   3.3. mod_init_function (string)
   3.4. child_init_method (string)

3.1. load (string)

   The path to the file with Python code to be executed from configuration
   file.

   Default value is “/usr/local/etc/kamailio/handler.py”.

   Example 1.1. Set load parameter
...
modparam("app_python3", "load", "/usr/local/etc/kamailio/myscript.py")
...

3.2. script_name (string)

   This is same as "load" parameter, kept for backward compatibility with
   the older versions of the module.

3.3. mod_init_function (string)

   The Python function to be executed by this module when it is
   initialized by Kamailio.

   Default value is “mod_init”.

   Example 1.2. Set mod_init_function parameter
...
modparam("app_python3", "mod_init_function", "my_mod_init")
...

3.4. child_init_method (string)

   The Python function to be executed by this module when a new worker
   process (child) is initialized by Kamailio.

   Default value is “child_init”.

   Example 1.3. Set child_init_method parameter
...
modparam("app_python3", "child_init_method", "my_child_init")
...

4. Functions

   4.1. python_exec(method [, args])

4.1.  python_exec(method [, args])

   Execute the Python function with the name given by the parameter
   'method'. Optionally can be provided a second string with parameters to
   be passed to the Python function.

   Both parameters can contain pseudo-variables.

   Example 1.4. python_exec usage
...
python_exec("my_python_function");
python_exec("my_python_function", "my_params");
python_exec("my_python_function", "$rU");
...

5. RPC Commands

   5.1. app_python.reload
   5.2. app_python.api_list

5.1.  app_python.reload

   IMPORTANT: this is not thread-safe. In your Python script do not use C
   extensions with threads that call into apy_exec().

   Marks the need to reload the Python script. The actual reload is done
   in each worker when it next invokes a Python method. The module uses a
   worker process lock to prevent recursive reloads.

   This function only reloads the user script and creates a new script
   object. It does not reinitialize the interpreter. E.g., references in
   the old module remain if not redefined by the new version.

   Name: app_python.reload

   Parameters: none

   Example:
...
kamcmd app_python.reload
...

5.2.  app_python.api_list

   List the functions available via Kemi framework.

   Name: app_python.api_list

   Parameters: none

   Example:
...
kamcmd app_python.api_list
...
