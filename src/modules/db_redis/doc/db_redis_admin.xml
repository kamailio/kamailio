<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../../doc/docbook/entities.xml">
%docentities;

]>
<!-- Module User's Guide -->

<chapter>
	<title>&adminguide;</title>
	<section id="db_redis.sec.overview">
		<title>Overview</title>
		<para>
			This module provides a DB APIv1 connector for the Redis server (<ulink url="https://www.redis.io">https://www.redis.io</ulink>).

		</para>
		<para>
			It can be used as a replacement for other database modules such as
			db_mysql and db_postgres. Not all the specs of DB APIv1 are
			implemented, thus the usage of this module might be restricted to
			specific modules. Also, for proper performance, this module needs
			particular configuration tailored to the modules that make use of it.
		</para>
		<para>
			Since Redis does not provide a schema by itself, db_redis ships with
			schema files. The path to these has to be defined using the module parameter
			"schema_path". The schema definition is defined in one file per table, such that
			the file name corresponds to the table name, and each file is composed of a
			comma-separated list of column definitions in the format
			&lt;column-name&gt;/&lt;type&gt;[,&lt;column-name&gt;/&lt;type&gt; ...]
			in one line, followed by a line holding the table version.
		</para>
		<para>
			Example definition for the "location" table (from the usrloc module):
			<programlisting format="linespecific">
username/string,domain/string,contact/string,received/string,path/string,expires/timestamp,q/double,callid/string,cseq/int,last_modified/timestamp,flags/int,cflags/int,user_agent/string,socket/string,methods/int,ruid/string,reg_id/int,instance/string,server_id/int,connection_id/int,keepalive/int,partition/int
8
			</programlisting>
		</para>
		<para>
			Because Redis is a key-value store, it requires unique keys. This means
			that tables and rows from a relational SQL database, e.g. from MySQL, can
			not be ported one a 1:1 basis to Redis.
		</para>
		<para>
			For instance, usrloc relies on a key of "username@domain", but in order to store
			multiple contacts per AoR, it cannot be constrained to uniqueness. To
			work around this, db_redis supports mapping sets in such a way as to, in the case of
			the usrloc module, have a set with a key of "username@domain" and its entries being
			unique keys per contact based on the ruid of a contact. Thus, one contact in usrloc
			consists of a unique key "location:entry::example-ruid-1" being a hash with the columns like
			username, domain, contact, path etc. In addition, this unique key is stored
			in a set "location:usrdom::exampleuser:exampledomain.org". When usrloc does
			a lookup based on "username@domain", db_redis figures out via the keys/values
			the query constructed by usrloc to look for the final entry key in the
			mapping set first. It then query the actual entries from there, avoiding full
			table scans. For usrloc, the same holds true for expired contacts, requiring
			a different kind of mapping. There is a certain balance of read performance
			vs. write performance to consider, because inserts and deletes also have to
			maintain the mappings, though this yields much faster selects. The mappings can be
			freely defined, so even though other kamailio modules don't require a specific
			mapping to be in place for proper performance, mappings could be defined
			for external applications to read faster (for instance letting the acc module
			also write mappings besides the actual records for billing systems to
			correlate start and stop records faster).
		</para>
		<para>
			The key is always prefixed with 'tablename:entry::'. For example the record in
			'subscriber' table for user 'alice@sip.com' has the key:
			'subscriber:entry::alice:sip.com'. If all the records are just loaded at
			startup (or all reloaded at runtime), the key can just be made unique using whatever
			values added after 'tablename:entry::' prefix. For example, keys for 'address' table
			records can be: 'address:entry::1', address:entry::2', address:entry::3', ... No
			'keys' modparam of 'db_redis' for 'address' table needs to be defined.
		</para>
		<para>
			The mappings can be freely defined in the "keys" module parameter, which is
			composed of a semi-colon separated list of definitions in the format
			&lt;table-name&gt;=&lt;entry&gt;:&lt;column-name&gt;[&amp;&lt;map-name&gt;:&lt;column-name&gt;,&lt;column-name&gt;...].
			Each table must at least have an "entry" key for db_redis to be able to store data.
		</para>
		<para>
			Example:
			<programlisting format="linespecific">
location=entry:ruid&amp;usrdom:username,domain&amp;timer:partition,keepalive;acc=entry:callid,time_hires&amp;cid:callid
			</programlisting>
		</para>
		<para>
			For readability purposes, definitions of keys per table can span multiple Kamailio
			config lines by providing multiple "keys" modparams.
		</para>
	</section>

	<section>
		<title>Limitations</title>
		<itemizedlist>
			<listitem>
				<para>
					This module has implemented equivalent underlying Redis operations for INSERT,
					UPDATE, DELETE and SELECT. The ORDER BY clause for SELECT is not implemented.
					Raw querying is not implemented inside this module; for sending literal commands
					to the Redis server, use ndb_redis.
				</para>
			</listitem>
		</itemizedlist>
	</section>

	<section>
		<title>Dependencies</title>
		<section>
			<title>&kamailio; Modules</title>
			<para>
				The following modules must be loaded before this module:
				<itemizedlist>
					<listitem>
						<para>
							<emphasis>none</emphasis>.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>
		<section>
			<title>External Libraries or Applications</title>
			<para>
				The following libraries or applications must be installed before running
				&kamailio; with this module loaded:
				<itemizedlist>
					<listitem>
						<para>
						<emphasis>hiredis</emphasis> - available at
						<ulink url="https://github.com/redis/hiredis">https://github.com/redis/hiredis</ulink>
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>
	</section>

	<section>
		<title>Parameters</title>
		<section id="db_redis.p.schema_path">
			<title><varname>schema_path</varname> (string)</title>
			<para>
				The path to the table schemas.
			</para>
			<para>
				Default value: "/usr/share/kamailio/db_redis".
			</para>
			<example>
				<title>Setting schema_path module parameter</title>
				<programlisting format="linespecific">
...
modparam("db_redis", "schema_path", "/usr/local/share/kamailio/db_redis/kamailio")
...
				</programlisting>
			</example>
		</section>

		<section id="db_redis.p.keys">
			<title><varname>keys</varname> (string)</title>
			<para>
				The entry and mapping keys of tables.
			</para>
			<para>
				Default value: "" (empty).
			</para>
			<example>
				<title>Setting keys module parameter</title>
				<programlisting format="linespecific">
...
modparam("db_redis", "keys", "version=entry:table_name;location=entry:ruid&amp;usrdom:username,domain&amp;timer:partition,keepalive")
...
				</programlisting>
			</example>
		</section>

		<section id="db_redis.p.verbosity">
			<title><varname>verbosity</varname> (int)</title>
			<para>
				Control the verbosity of debug messages printed by the module.
				If set to 1, the module prints schema details for all tables
				on each connect operation to Redis server.
			</para>
			<para>
				Default value: 1.
			</para>
			<example>
				<title>Setting verbosity module parameter</title>
				<programlisting format="linespecific">
...
modparam("db_redis", "verbosity", 0)
...
				</programlisting>
			</example>
		</section>

	</section>

	<section id="db_redis.sec.usage">
		<title>Usage</title>
		<para>
			Load the module and set the "db_url" modparam for specific modules to:
			'redis://[username]@host:port/database'. Username is optional.
			The database portion must be a valid Redis database number.
		</para>
		<example>
			<title>Usage</title>
			<programlisting format="linespecific">
...
loadmodule "db_redis.so"
...
#!define DBURL_USRLOC "redis://127.0.0.1:6379/5"
#!define DBURL_ACC    "redis://127.0.0.1:6379/6"
#!define DBURL_AUTH   "redis://127.0.0.1:6379/7"
#!define DBURL_PERM   "redis://127.0.0.1:6379/8"
...
modparam("db_redis", "schema_path", "/usr/share/kamailio/db_redis/kamailio")
modparam("db_redis", "keys", "location=entry:ruid&amp;usrdom:username,domain&amp;timer:partition,keepalive")
modparam("db_redis", "keys", "acc=entry:callid,time_hires&amp;cid:callid")
modparam("db_redis", "keys", "subscriber=entry:username,domain")
...
modparam("usrloc", "db_url", DBURL_USRLOC)
...
modparam("acc_db", "db_url", DBURL_ACC)
...
modparam("auth_db", "db_url", DBURL_AUTH)
...
modparam("permissions", "db_url", DBURL_PERM)
...
			</programlisting>
		</example>
		<para>
		Samples adding records for address table using 'redis-cli':
		</para>
		<example>
			<title>Usage</title>
			<programlisting format="linespecific">
...
SELECT 8
HMSET address:entry::1 id 1 grp 1 ip_addr "127.0.0.1" mask 32 port 0
HMSET address:entry::2 id 2 grp 1 ip_addr "127.0.0.2" mask 32 port 0
HMSET address:entry::3 id 3 grp 2 ip_addr "127.0.0.3" mask 32 port 0
HMSET address:entry::4 id 4 grp 2 ip_addr "127.0.0.4" mask 32 port 0 tag "test"
...
			</programlisting>
		</example>
		<para>
		Note that is some cases, the optional values in database tables can be
		omitted. For 'address' table, the 'tag' value may be omitted. To avoid
		any issues, set unused fields to their default values as defined by database
		schema. When definition allows 'NULL', that field can be unset.
		</para>
	</section>

	<section>
		<title>Module Specific Considerations</title>
		<section>
			<title>usrloc</title>
			<para>
				If you set "expires_type" to "1" in order to use BIGINT instead of DATETIME,
				make sure to update your location schema file and change the type of "expires"
				and "last_modified" from "time" to "int".
			</para>
		</section>
	</section>

</chapter>
