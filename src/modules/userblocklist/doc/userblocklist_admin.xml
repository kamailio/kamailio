<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../../doc/docbook/entities.xml">
%docentities;

]>
<chapter>
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
	The userblocklist module allows &kamailio; to handle blocklists
	on a per user basis. This information is stored in a database
	table, which is queried to decide if the number (more exactly,
	the request URI user) is blocklisted or not.
	</para>
	<para>
	An additional functionality that this module provides is the ability
	to handle global blocklists. This lists are loaded on startup into
	memory, thus providing a better performance than the userblocklist
	case. These global blocklists are useful to allow only calls to certain 
	international destinations, i.e. block all not allowlisted numbers.
	They could also be used to prevent the blocklisting of important	
	numbers, as allowlisting is supported too. This is useful for example
	to prevent the customer from blocking emergency call number or service
	hotlines.
	</para>
	<para>
	The module exports four functions, <function>check_blocklist</function>,
	<function>check_allowlist</function>,
	<function>check_user_blocklist</function> and <function>check_user_allowlist</function>
	for usage in the configuration file. Furthermore it provides a MI function to
	reload the global blocklist cache.
	</para>
	<para>
	Please note that only numerical strings for matching are supported at the
	moment (the used library supports this already, but its not yet implemented
	in the module). Non-digits on the beginning of the matched string are skipped,
	any later non-digits will stop the matching on this position.
	</para>
	</section>

	<section>
		<title>Dependencies</title>
		<section>
			<title>&kamailio; Modules</title>
			<para>
			The module depends on the following modules (in the other words 
			the listed modules must be loaded before this module):
			</para>
			<itemizedlist>
			<listitem>
				<para><emphasis>database</emphasis> 
				-- Any db_* database module</para>
			</listitem>
			</itemizedlist>
		</section>
		<section>
			<title>External Libraries or Applications</title>
			<para>
			The following libraries or applications must be installed 
			before running &kamailio; with this module loaded:
			</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>none</emphasis></para>
				</listitem>
			</itemizedlist>
		</section>
	</section>


	<section  xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Parameters</title>
    	<section id="userblocklist.p.use_domain">
	    <title><varname>use_domain</varname> (integer)</title>
	    <para>
			If set to non-zero value, the domain column in the
			userblocklist table is used.
	    </para>
	    <para>
		    <emphasis>
			    Default value is <quote>0</quote>.
		    </emphasis>
	    </para>
	    <example>
		    <title>Set <varname>use_domain</varname> parameter</title>
		    <programlisting format="linespecific">
...
modparam("userblocklist", "use_domain", 1)
...
		    </programlisting>
	    </example>
    </section>
    <section id="userblocklist.p.match_mode">
    	    <title><varname>match_mode</varname> (integer)</title>
	    <para>
		The number of individual characters that are used for matching. 
		Valid values are 10 or 128. When you specify 10, only digits will be used for matching, 
		this operation mode is equivalent to the old behaviour. When configured with 128, 
		all standard ASCII chars are available for matching. Please be aware that memory 
		requirements for storing the routing tree in shared memory will also
		increase by a factor of 12.8.
	    </para>
	    <para>
		    <emphasis>
			    Default value is <quote>10</quote>.
		    </emphasis>
	    </para>
	    <example>
		    <title>Set <varname>match_mode</varname> parameter</title>
		    <programlisting format="linespecific">
...
modparam("userblocklist", "match_mode", 128)
...
		    </programlisting>
	    </example>
    </section>
    
  <section id="userblocklist.p.db_url">
    <title><varname>db_url</varname> (String)</title>
    <para>URL to the database containing the data.</para>
    <para>
      <emphasis>Default value is <quote>&defaultrodb;</quote>.</emphasis>
    </para>
    <example>
      <title>Set <varname>db_url</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "db_url", "dbdriver://username:password@dbhost/dbname")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>userblocklist_table</varname> (String)</title>
    <para>Name of the userblocklist table for the userblocklist module.</para>
    <para>
      <emphasis>Default value is <quote>userblocklist</quote>.</emphasis>
    </para>
    <example>
      <title>Set <varname>userblocklist_table</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "userblocklist_table", "userblocklist")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>userblocklist_id_col</varname> (string)</title>
    <para>unique ID</para>
    <example>
      <title>Set <varname>userblocklist_id_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "userblocklist_id_col", "id")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>userblocklist_username_col</varname> (string)</title>
    <para>The user that is used for the blocklist lookup.</para>
    <example>
      <title>Set <varname>userblocklist_username_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "userblocklist_username_col", "username")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>userblocklist_domain_col</varname> (string)</title>
    <para>The domain that is used for the blocklist lookup.</para>
    <example>
      <title>Set <varname>userblocklist_domain_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "userblocklist_domain_col", "domain")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>userblocklist_prefix_col</varname> (string)</title>
    <para>The prefix that is matched for the blocklist.</para>
    <example>
      <title>Set <varname>userblocklist_prefix_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "userblocklist_prefix_col", "prefix")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>userblocklist_allowlist_col</varname> (string)</title>
    <para>Specify if this a blocklist (0) or a allowlist (1) entry.</para>
    <example>
      <title>Set <varname>userblocklist_allowlist_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "userblocklist_allowlist_col", "allowlist")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>globalblocklist_table</varname> (String)</title>
    <para>Name of the globalblocklist table for the userblocklist module.
    Please note that this table is used when the check_blocklist
	function is called with no parameters.</para>
    <para>
      <emphasis>Default value is <quote>globalblocklist</quote>.</emphasis>
    </para>
    <example>
      <title>Set <varname>globalblocklist_table</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "globalblocklist_table", "globalblocklist")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>globalblocklist_id_col</varname> (string)</title>
    <para>unique ID</para>
    <example>
      <title>Set <varname>globalblocklist_id_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "globalblocklist_id_col", "id")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>globalblocklist_prefix_col</varname> (string)</title>
    <para>The prefix that is matched for the blocklist.</para>
    <example>
      <title>Set <varname>globalblocklist_prefix_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "globalblocklist_prefix_col", "prefix")
...
</programlisting>
    </example>
  </section>
  <section>
    <title><varname>globalblocklist_allowlist_col</varname> (string)</title>
    <para>Specify if this a blocklist (0) or a allowlist (1) entry.</para>
    <example>
      <title>Set <varname>globalblocklist_allowlist_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "globalblocklist_allowlist_col", "allowlist")
...
</programlisting>
    </example>
  </section>

  <section>
    <title><varname>globalblocklist_description_col</varname> (string)</title>
    <para>A comment for the entry.</para>
    <example>
      <title>Set <varname>globalblocklist_description_col</varname> parameter</title>
      <programlisting format="linespecific">
...
modparam("userblocklist", "globalblocklist_description_col", "description")
...
</programlisting>
    </example>
  </section>

</section>
<section>
	<title>Functions</title>
    	<section id="userblocklist.f.check_user_blocklist">
	    <title>
		<function moreinfo="none">check_user_blocklist
		(string user, string domain, string number, string table)</function>
	    </title>
	    <para>
		Finds the longest prefix that matches the request URI user (or the number
		parameter) for the given user and domain name in the database.
		If a match is found and it is not set to allowlist, false is returned.
		Otherwise, true is returned. Pseudo-variables or AVPs can be used for
		the user, domain and number parameters. The number and table variables
		are optional, the defaults are used if they are omitted. The number
		parameter can be used to check for example against the from URI user.
	    </para>
	<example>
		<title><function>check_user_blocklist</function> usage</title>
		<programlisting format="linespecific">
...
$avp(i:80) = $rU;
# rewrite the R-URI
if (!check_user_blocklist("$avp(i:80)", "$avp(i:82)")) {
	sl_send_reply("403", "Forbidden");
	exit;
}
...
		</programlisting>
	    </example>
	</section>
    	<section id="userblocklist.f.check_user_allowlist">
	    <title>
		<function moreinfo="none">check_user_allowlist
		(string user, string domain, string number, string table)</function>
	    </title>
	    <para>
		Finds the longest prefix that matches the request URI user (or the number
		parameter) for the given user and domain name in the database.
		If a match is found and it is set to allowlist, true is returned.
		Otherwise, false is returned. Pseudo-variables or AVPs can be used for
		the user, domain and number parameters. The number and table variables
		are optional, the defaults are used if they are omitted. The number
		parameter can be used to check for example against the from URI user.
	    </para>
	<example>
		<title><function>check_user_allowlist</function> usage</title>
		<programlisting format="linespecific">
...
$avp(i:80) = $rU;
# rewrite the R-URI
if (!check_user_allowlist("$avp(i:80)", "$avp(i:82)")) {
	# process request
	exit;
}
...
		</programlisting>
	    </example>
	</section>
    	<section id="userblocklist.f.check_blocklist">
	    <title>
		<function moreinfo="none">check_blocklist ([string table])</function>
	    </title>
	    <para>
		Finds the longest prefix that matches the request URI for the
		given table. If a match is found and it is not set to allowlist,
		false is returned. Otherwise, true is returned. If no table is given, 
		then globalblocklist_table is used.
	    </para>
	<example>
		<title><function>check_blocklist</function> usage</title>
		<programlisting format="linespecific">
...
if (!check_blocklist("globalblocklist")) {
	sl_send_reply("403", "Forbidden");
	exit;
}
...
		</programlisting>
	    </example>
	</section>
    	<section id="userblocklist.f.check_allowlist">
	    <title>
		<function moreinfo="none">check_allowlist (string table)</function>
	    </title>
	    <para>
		Finds the longest prefix that matches the request URI for the
		given table. If a match is found and it is set to allowlist,
		true is returned. Otherwise, false is returned.
	    </para>
	<example>
		<title><function>check_allowlist</function> usage</title>
		<programlisting format="linespecific">
...
if (!check_allowlist("globalblocklist")) {
	sl_send_reply("403", "Forbidden");
	exit;
}
...
		</programlisting>
	    </example>
	</section>
</section>

<section>
	<title>RPC Commands</title>
		<section id="userblocklist.r.reload_blocklist">
			<title>
				<function moreinfo="none">userblocklist.reload_blocklist</function>
			</title>
			<para>
				Reload the internal global blocklist cache. This is necessary after
				the database tables for the global blocklist have been changed.
			</para>
			<example>
				<title><function>userblocklist.reload_blocklist</function> usage</title>
				<programlisting format="linespecific">
...
&kamcmd; userblocklist.reload_blocklist
...
				</programlisting>
			</example>
		</section>
</section>

<section>
	<title>MI Commands</title>
		<section>
			<title>
				<function moreinfo="none">reload_blocklist</function>
			</title>
			<para>
				Reload the internal global blocklist cache. This is necessary after
				the database tables for the global blocklist have been changed.
			</para>
			<example>
				<title><function>reload_blocklist</function> usage</title>
				<programlisting format="linespecific">
					...
					&ctltool; fifo reload_blocklist
					...
				</programlisting>
	    		</example>
		</section>

		<section>
			<title>
				<function moreinfo="none">dump_blocklist</function>
			</title>
			<para>
				Dumps the default, in memory, global_blocklist content to stdout.
				Note that a reload_blocklist should be issued before, 
				in order to see the latest content of the database.
			</para>
			<example>
				<title><function>dump_blocklist</function> usage</title>
				<programlisting format="linespecific">
					...
					&ctltool; fifo reload_blocklist
					&ctltool; fifo dump_blocklist
					...
				</programlisting>
	    		</example>
		</section>

		<section>
			<title>
				<function moreinfo="none">check_blocklist prefix</function>
			</title>
			<para>
				Searches in the default, in memory, global list. 
				Finds the longest prefix that matches the given prefix parameter. 
				Returns true if the prefix is found and the allowlist is <emphasis>not</emphasis> set. 
				Returns false otherwise - either prefix found and allowlist set or prefix not found. 
				Note that a reload_blocklist should be issued before, 
				in order to check through the latest content of the database.
			</para>
			<example>
				<title><function>check_blocklist</function> usage</title>
				<programlisting format="linespecific">
					...
					&ctltool; fifo reload_blocklist
					&ctltool; fifo check_blocklist prefix
					...
				</programlisting>
	    		</example>
		</section>

		<section>
			<title>
				<function moreinfo="none">check_allowlist prefix</function>
			</title>
			<para>
				Searches in the default, in memory, global list. 
				Finds the longest prefix that matches the given prefix parameter. 
				Returns true if the prefix is found and the allowlist is set. 
				Returns false otherwise - either prefix found and allowlist 
				<emphasis>not</emphasis> set or prefix not found. 
				Note that a reload_blocklist should be issued before, 
				in order to check through the latest content of the database.
			</para>
			<example>
				<title><function>check_allowlist</function> usage</title>
				<programlisting format="linespecific">
					...
					&ctltool; fifo reload_blocklist
					&ctltool; fifo check_allowlist prefix
					...
				</programlisting>
	    		</example>
		</section>

		<section>
			<title>
				<function moreinfo="none">check_userblocklist user [domain] prefix</function>
			</title>
			<para>
				Searches in the default user list table.
				Finds the longest prefix for the given user@domain that matches the given prefix parameter. 
				Returns true if the prefix is found and the allowlist is <emphasis>not</emphasis> set. 
				Returns false otherwise - either prefix found and allowlist set or prefix not found. 
				Note that the domain parameter is optional. 
				If not given, the second parameter is the considered to be the prefix. 
			</para>
			<example>
				<title><function>check_userblocklist</function> usage</title>
				<programlisting format="linespecific">
					...
					&ctltool; fifo check_userblocklist user [domain] prefix
					...
				</programlisting>
	    		</example>
		</section>

		<section>
			<title>
				<function moreinfo="none">check_userallowlist user [domain] prefix</function>
			</title>
			<para>
				Searches in the default user list table.
				Finds the longest prefix for the given user@domain that matches the given prefix parameter. 
				Returns true if the prefix is found and the allowlist is set. 
				Returns false otherwise - either prefix found and allowlist 
				<emphasis>not</emphasis> set or prefix not found. 
				Note that the domain parameter is optional. 
				If not given, the second parameter is the considered to be the prefix. 
			</para>
			<example>
				<title><function>check_userallowlist</function> usage</title>
				<programlisting format="linespecific">
					...
					&ctltool; fifo check_userallowlist user [domain] prefix
					...
				</programlisting>
	    		</example>
		</section>
</section>

    <section>
	<title>Installation and Running</title>
	<section>
		<title>Database setup</title>
		<para>
			Before running &kamailio; with the userblocklist module,
			you have to setup the database table where the module will
			read the blocklist data. For that, if the table was not created
			by the installation script or you choose to install everything
			by yourself you can use the <emphasis>userblocklist-create.sql</emphasis>
			<acronym>SQL</acronym> script in the database directories in the 
			kamailio/scripts folder as template. 
			Database and table name can be set with module parameters so they 
			can be changed, but the name of the columns must be as they are 
			in the <acronym>SQL</acronym> script.
			You can also find the complete database documentation on the
			project webpage, &kamailiodbdocs;.
		</para>

	<example>
		<title>Example database content - globalblocklist table</title>
		<programlisting format="linespecific">
...
+----+-----------+-----------+
| id | prefix    | allowlist |
+----+-----------+-----------+
|  1 |           |         0 |
|  2 | 1         |         1 |
|  3 | 123456    |         0 |
|  4 | 123455787 |         0 |
+----+-----------+-----------+
...
		</programlisting>
	</example>
	<para>
		This table will setup a global blocklist for all numbers, only allowing calls
		starting with <quote>1</quote>. Numbers that starts with <quote>123456</quote>
		and <quote>123455787</quote> are also blocklisted, because the longest prefix
		will be matched.
	</para>

	<example>
		<title>Example database content - userblocklist table</title>
		<programlisting format="linespecific">
...
+----+----------------+-------------+-----------+-----------+
| id | username       | domain      | prefix    | allowlist |
+----+----------------+-------------+-----------+-----------+
| 23 | 49721123456788 |             | 1234      |         0 |
| 22 | 49721123456788 |             | 123456788 |         1 |
| 21 | 49721123456789 |             | 12345     |         0 |
| 20 | 494675231      |             | 499034133 |         1 |
| 19 | 494675231      | test        | 499034132 |         0 |
| 18 | 494675453      | test.domain | 49901     |         0 |
| 17 | 494675454      |             | 49900     |         0 |
+----+----------------+-------------+-----------+-----------+
...
		</programlisting>
	</example>
	<para>
		This table will setup user specific blocklists for certain usernames. For example
		for user <quote>49721123456788</quote> the prefix <quote>1234</quote> will be not
		allowed, but the number <quote>123456788</quote> is allowed. Additionally a domain
		could be specified that is used for username matching if the <quote>use_domain</quote>
		parameter is set.
	</para>
</section>
</section>
</chapter>
