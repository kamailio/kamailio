#! /bin/sh
#
### BEGIN INIT INFO
# Provides:          kamailio
# Required-Start:    $syslog $network $local_fs $remote_fs $time
# Should-Start:      $named slapd mysql postgresql snmpd radiusd
# Should-Stop:       $named slapd mysql postgresql snmpd radiusd
# Required-Stop:     $syslog $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the Kamailio SIP proxy server
# Description:       Start the Kamailio SIP proxy server
### END INIT INFO

. /lib/lsb/init-functions

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/kamailio
NAME=`basename "$0"`
DESC="Kamailio SIP Server"
HOMEDIR=/var/run/$NAME
PIDFILE=$HOMEDIR/$NAME.pid
DEFAULTS=/etc/default/$NAME
CFGFILE=/etc/$NAME/kamailio.cfg
RUN_KAMAILIO=no
USER=kamailio
GROUP=kamailio
# Amount of shared and private memory to allocate
# for the running Kamailio server (in Mb)
SHM_MEMORY=64
PKG_MEMORY=8
DUMP_CORE=no

# Do not start kamailio if fork=no is set in the config file
# otherwise the boot process will just stop
check_fork ()
{
    if grep -q "^[[:space:]]*fork[[:space:]]*=[[:space:]]*no.*" $CFGFILE; then
	log_failure_msg "Not starting $DESC: fork=no specified in config file; run /etc/init.d/kamailio debug instead"
	exit 0
    fi
}

check_kamailio_config ()
{
	# Check if kamailio configuration is valid before starting the server
	set +e
	out=$($DAEMON -f $CFGFILE -M $PKG_MEMORY -c 2>&1 > /dev/null)
	retcode=$?
	set -e
	if [ "$retcode" != '0' ]; then
	    log_failure_msg "Not starting $DESC: invalid configuration file!"
	    log_failure_msg
	    log_failure_msg "$out"
	    log_failure_msg
	    exit 1
	fi
}

create_radius_seqfile ()
{
    # Create a radius sequence file to be used by the radius client if
    # radius accounting is enabled. This is needed to avoid any issue
    # with the file not being writable if kamailio first starts as user
    # root because DUMP_CORE is enabled and creates this file as user
    # root and then later it switches back to user kamailio and cannot
    # write to the file. If the file exists before kamailio starts, it
    # won't change it's ownership and will be writable for both root
    # and kamailio, no matter what options are chosen at install time
    RADIUS_SEQ_FILE="$HOMEDIR/kamailio_radius.seq"
    if [ -d $HOMEDIR ]; then
	chown ${USER}:${GROUP} $HOMEDIR

	if [ ! -f $RADIUS_SEQ_FILE ]; then
	    touch $RADIUS_SEQ_FILE
	fi

	chown ${USER}:${GROUP} $RADIUS_SEQ_FILE
	chmod 660 $RADIUS_SEQ_FILE
    fi
}

test -f $DAEMON || exit 0

# Load startup options if available
if [ -f $DEFAULTS ]; then
   . $DEFAULTS || true
fi

if [ "$RUN_KAMAILIO" != "yes" ]; then
    log_failure_msg "Kamailio not yet configured. Edit /etc/default/$NAME first."
    exit 0
fi

set -e

SHM_MEMORY=$((`echo $SHM_MEMORY | sed -e 's/[^0-9]//g'`))
PKG_MEMORY=$((`echo $PKG_MEMORY | sed -e 's/[^0-9]//g'`))
[ -z "$USER" ]  && USER=kamailio
[ -z "$GROUP" ] && GROUP=kamailio
[ $SHM_MEMORY -le 0 ] && SHM_MEMORY=64
[ $PKG_MEMORY -le 0 ] && PKG_MEMORY=4

if test "$DUMP_CORE" = "yes" ; then
    # set proper ulimit
    ulimit -c unlimited

    # directory for the core dump files
    # COREDIR=/home/corefiles
    # [ -d $COREDIR ] || mkdir $COREDIR
    # chmod 777 $COREDIR
    # echo "$COREDIR/core.%e.sig%s.%p" > /proc/sys/kernel/core_pattern
fi

# /var/run can be a tmpfs
if [ ! -d $HOMEDIR ]; then
    mkdir -p $HOMEDIR
    chown ${USER}:${GROUP} $HOMEDIR
fi

OPTIONS="-f $CFGFILE -P $PIDFILE -m $SHM_MEMORY -M $PKG_MEMORY -u $USER -g $GROUP"

case "$1" in
  start|debug)
	check_kamailio_config
	create_radius_seqfile

	if [ "$1" != "debug" ]; then
	    check_fork
	fi

	log_daemon_msg "Starting $DESC: $NAME"
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
		--exec $DAEMON -- $OPTIONS || log_failure_msg " already running"
	log_end_msg 0
	;;
  stop)
	log_daemon_msg "Stopping $DESC: $NAME"
	start-stop-daemon --oknodo --stop --quiet --pidfile $PIDFILE \
		--exec $DAEMON
	log_end_msg 0
	;;
  restart|force-reload)
	check_kamailio_config
	create_radius_seqfile

	$0 stop
	sleep 1
	$0 start
	;;
  status)
	log_daemon_msg "Status of $DESC: "

	status_of_proc -p"$PIDFILE" $NAME $NAME
	;;
  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|force-reload|status|debug}" >&2
	exit 1
	;;
esac

exit 0
